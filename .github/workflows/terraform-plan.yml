name: 'Terraform Plan'

on:
  push:
    branches:
    - feature
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID}}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: init
        tf_actions_working_dir: ./terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: fmt
        tf_actions_working_dir: ./terraform

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: plan
        tf_actions_working_dir: ./terraform
